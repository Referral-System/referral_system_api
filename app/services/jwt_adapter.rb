require "jwt"

# Adapter to JWT gem
class JwtAdapter
  ALGORITHM = "HS256"
  KEY = Rails.application.credentials.secret_key_base

  class << self
    # @param opts [Hash]
    # @option opts [Integer] :iat Issued at (number of seconds since the Epoch)
    # @option opts [Integer] :nbf Not Before Time (number of seconds since the Epoch)
    # @option opts [Integer] :exp Expire date (default 1 hour)
    # @return [String] jwt
    def create_auth_token(user_id, opts = {})
      now = Time.now.utc
      payload = {
        iat: opts[:iat] || now.to_i,
        nbf: opts[:nbf] || now.to_i,
        exp: opts[:exp] || 1.hour.since(now).to_i,
        sub: user_id
      }
      log_debug("Creating new token for user with id #{user_id}", user_id)
      encode(payload)
    end

    # @param payload [Hash]
    # @return [String] jwt
    def encode(payload)
      JWT.encode(payload, KEY, ALGORITHM, { typ: "JWT" })
    end

    # @param token [String] JWT token generated by this class
    # @return [Hash{Symbol->String}] payload data
    def decode(token)
      decoded = JWT.decode(token, KEY, true, { algorithm: ALGORITHM }).first

      decoded.transform_keys(&:to_sym)
    end

    # @param msg [String]
    # @param user_id [Integer]
    # @return [void]
    def log_debug(msg, user_id)
      data = {
        view: "JwtAdapter",
        action: "create_auth_token",
        user_id: user_id,
        request_payload: {},
        message: msg,
        has_error: false
      }

      Log.create!(data)
      Rails.logger.debug(msg)
    end
  end
end
